{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Isaac\\\\Desktop\\\\mern_stuff\\\\client\\\\src\\\\components\\\\spotifyData.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpotifyData = () => {\n  _s();\n  const [topTracks, setTopTracks] = useState([]);\n  useEffect(() => {\n    // Fetch data from the server (you might use the Fetch API, Axios, or any other library)\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://localhost:3000/spotifyData/callback'); // Replace with your actual API endpoint\n\n        if (!response.ok) {\n          // Check if the response status is not OK\n          console.error(`Error fetching data. Status: ${response.status}, ${response.statusText}`);\n          return;\n        }\n        const data = await response.json();\n        setTopTracks(data); // Assuming the response contains an array of top tracks\n      } catch (error) {\n        console.error('Error fetching data:', error.message);\n      }\n    };\n    fetchData();\n  }, []); // The empty dependency array ensures the effect runs only once on mount\n\n  if (!topTracks || topTracks.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"No Top Tracks Available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Your Top Spotify Tracks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: topTracks.map(track => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [track.name, \" by \", track.artists.map(artist => artist.name).join(', ')]\n      }, track.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(SpotifyData, \"lc0lFEXh3OzYXA9KaNtp4gIhkiQ=\");\n_c = SpotifyData;\nexport default SpotifyData;\nvar _c;\n$RefreshReg$(_c, \"SpotifyData\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","SpotifyData","_s","topTracks","setTopTracks","fetchData","response","fetch","ok","console","error","status","statusText","data","json","message","length","children","fileName","_jsxFileName","lineNumber","columnNumber","map","track","name","artists","artist","join","id","_c","$RefreshReg$"],"sources":["C:/Users/Isaac/Desktop/mern_stuff/client/src/components/spotifyData.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst SpotifyData = () => {\r\n  const [topTracks, setTopTracks] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Fetch data from the server (you might use the Fetch API, Axios, or any other library)\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:3000/spotifyData/callback'); // Replace with your actual API endpoint\r\n  \r\n        if (!response.ok) {\r\n          // Check if the response status is not OK\r\n          console.error(`Error fetching data. Status: ${response.status}, ${response.statusText}`);\r\n          return;\r\n        }\r\n  \r\n        const data = await response.json();\r\n        setTopTracks(data); // Assuming the response contains an array of top tracks\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error.message);\r\n      }\r\n    };\r\n  \r\n    fetchData();\r\n  }, []); // The empty dependency array ensures the effect runs only once on mount\r\n\r\n  if (!topTracks || topTracks.length === 0) {\r\n    return (\r\n      <div>\r\n        <h1>No Top Tracks Available</h1>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Your Top Spotify Tracks</h1>\r\n      <ul>\r\n        {topTracks.map((track) => (\r\n          <li key={track.id}>\r\n            {track.name} by {track.artists.map((artist) => artist.name).join(', ')}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpotifyData;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACd;IACA,MAAMO,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,CAAC,CAAC,CAAC;;QAE5E,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UAChB;UACAC,OAAO,CAACC,KAAK,CAAE,gCAA+BJ,QAAQ,CAACK,MAAO,KAAIL,QAAQ,CAACM,UAAW,EAAC,CAAC;UACxF;QACF;QAEA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;QAClCV,YAAY,CAACS,IAAI,CAAC,CAAC,CAAC;MACtB,CAAC,CAAC,OAAOH,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAACK,OAAO,CAAC;MACtD;IACF,CAAC;IAEDV,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,IAAI,CAACF,SAAS,IAAIA,SAAS,CAACa,MAAM,KAAK,CAAC,EAAE;IACxC,oBACEhB,OAAA;MAAAiB,QAAA,eACEjB,OAAA;QAAAiB,QAAA,EAAI;MAAuB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B,CAAC;EAEV;EAEA,oBACErB,OAAA;IAAAiB,QAAA,gBACEjB,OAAA;MAAAiB,QAAA,EAAI;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChCrB,OAAA;MAAAiB,QAAA,EACGd,SAAS,CAACmB,GAAG,CAAEC,KAAK,iBACnBvB,OAAA;QAAAiB,QAAA,GACGM,KAAK,CAACC,IAAI,EAAC,MAAI,EAACD,KAAK,CAACE,OAAO,CAACH,GAAG,CAAEI,MAAM,IAAKA,MAAM,CAACF,IAAI,CAAC,CAACG,IAAI,CAAC,IAAI,CAAC;MAAA,GAD/DJ,KAAK,CAACK,EAAE;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEb,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACnB,EAAA,CA7CID,WAAW;AAAA4B,EAAA,GAAX5B,WAAW;AA+CjB,eAAeA,WAAW;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}