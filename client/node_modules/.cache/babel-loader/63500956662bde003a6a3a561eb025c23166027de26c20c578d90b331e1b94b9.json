{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Isaac\\\\Desktop\\\\mern_stuff\\\\client\\\\src\\\\components\\\\topTracks.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TopTracks = () => {\n  _s();\n  const [topTracks, setTopTracks] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Fetch data from your Express server\n        const response = await fetch('http://localhost:3000/spotifyData/callback');\n        const data = await response.json();\n        setTopTracks(data); // Assuming the response contains an array of top tracks\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []); // The empty dependency array ensures the effect runs only once on mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Top Tracks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: topTracks.map(track => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: track.name\n      }, track.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_s(TopTracks, \"lc0lFEXh3OzYXA9KaNtp4gIhkiQ=\");\n_c = TopTracks;\nexport default TopTracks;\nvar _c;\n$RefreshReg$(_c, \"TopTracks\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","TopTracks","_s","topTracks","setTopTracks","fetchData","response","fetch","data","json","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","map","track","name","id","_c","$RefreshReg$"],"sources":["C:/Users/Isaac/Desktop/mern_stuff/client/src/components/topTracks.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst TopTracks = () => {\r\n  const [topTracks, setTopTracks] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        // Fetch data from your Express server\r\n        const response = await fetch('http://localhost:3000/spotifyData/callback');\r\n        const data = await response.json();\r\n        setTopTracks(data); // Assuming the response contains an array of top tracks\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []); // The empty dependency array ensures the effect runs only once on mount\r\n\r\n  return (\r\n    <div>\r\n      <h2>Top Tracks</h2>\r\n      <ul>\r\n        {topTracks.map((track) => (\r\n          <li key={track.id}>{track.name}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TopTracks;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACd,MAAMQ,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,CAAC;QAC1E,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClCL,YAAY,CAACI,IAAI,CAAC,CAAC,CAAC;MACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAEDL,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEL,OAAA;IAAAY,QAAA,gBACEZ,OAAA;MAAAY,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnBhB,OAAA;MAAAY,QAAA,EACGT,SAAS,CAACc,GAAG,CAAEC,KAAK,iBACnBlB,OAAA;QAAAY,QAAA,EAAoBM,KAAK,CAACC;MAAI,GAArBD,KAAK,CAACE,EAAE;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAkB,CACpC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACd,EAAA,CA5BID,SAAS;AAAAoB,EAAA,GAATpB,SAAS;AA8Bf,eAAeA,SAAS;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}